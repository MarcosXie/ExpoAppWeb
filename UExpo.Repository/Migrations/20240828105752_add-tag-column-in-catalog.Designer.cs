// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UExpo.Repository.Context;

#nullable disable

namespace UExpo.Repository.Migrations;

[DbContext(typeof(UExpoDbContext))]
[Migration("20240828105752_add-tag-column-in-catalog")]
partial class addtagcolumnincatalog
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "8.0.7")
            .HasAnnotation("Relational:MaxIdentifierLength", 64);

        MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

        modelBuilder.Entity("UExpo.Domain.Dao.AdminDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<bool>("Active")
                    .HasColumnType("tinyint(1)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("varchar(255)");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("Type")
                    .HasColumnType("int");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id")
                    .HasName("admin_pkey");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("admin", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.AgendaDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<DateTime>("BeginDate")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime>("EndDate")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Place")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id")
                    .HasName("agenda_pkey");

                b.ToTable("agenda", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CalendarDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<DateTime>("BeginDate")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime>("EndDate")
                    .HasColumnType("datetime(6)");

                b.Property<bool>("IsLocked")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("Place")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("Year")
                    .HasColumnType("int");

                b.HasKey("Id")
                    .HasName("calendar_pkey");

                b.ToTable("calendar", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CalendarFairDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("CalendarId")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id")
                    .HasName("calendar_fair_pkey");

                b.HasIndex("CalendarId");

                b.ToTable("calendar_fair", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CalendarSegmentDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<Guid>("FairId")
                    .HasColumnType("char(36)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id")
                    .HasName("calendar_segment_pkey");

                b.HasIndex("FairId");

                b.ToTable("calendar_segment", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CallCenterChatDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid?>("AdminId")
                    .HasColumnType("char(36)");

                b.Property<string>("AdminLang")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<Guid>("UserId")
                    .HasColumnType("char(36)");

                b.Property<string>("UserLang")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.HasKey("Id")
                    .HasName("call_center_pkey");

                b.HasIndex("AdminId");

                b.HasIndex("UserId")
                    .IsUnique();

                b.ToTable("call_center_chat", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CallCenterMessageDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("ChatId")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<bool>("Readed")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("ReceiverLang")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("SendedMessage")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<Guid>("SenderId")
                    .HasColumnType("char(36)");

                b.Property<string>("SenderLang")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("SenderName")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("TranslatedMessage")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id")
                    .HasName("call_center_message_pkey");

                b.HasIndex("ChatId");

                b.ToTable("call_center_message", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CatalogDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("JsonTable")
                    .HasColumnType("longtext");

                b.Property<string>("Tags")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<Guid>("UserId")
                    .HasColumnType("char(36)");

                b.HasKey("Id")
                    .HasName("catalog_pkey");

                b.HasIndex("UserId")
                    .IsUnique();

                b.ToTable("catalog", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CatalogItemImageDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("CatalogId")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("ItemId")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("Order")
                    .HasColumnType("int");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Uri")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.HasKey("Id")
                    .HasName("catalog_item_image_pkey");

                b.HasIndex("CatalogId");

                b.ToTable("catalog_item_image", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CatalogPdfDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("CatalogId")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Uri")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.HasKey("Id")
                    .HasName("catalog_pdf_pkey");

                b.HasIndex("CatalogId");

                b.ToTable("catalog_pdf", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.ExhibitorFairRegisterDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<Guid>("CalendarFairId")
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<Guid>("ExhibitorId")
                    .HasColumnType("char(36)");

                b.Property<bool>("IsPaid")
                    .HasColumnType("tinyint(1)");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<double>("Value")
                    .HasColumnType("double");

                b.HasKey("Id")
                    .HasName("exhibitor_fair_register_pkey");

                b.HasIndex("CalendarFairId");

                b.HasIndex("ExhibitorId");

                b.ToTable("exhibitor_fair_register", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.FairDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<bool>("Active")
                    .HasColumnType("tinyint(1)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id")
                    .HasName("fair_pkey");

                b.ToTable("fair", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.SegmentDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<Guid>("FairId")
                    .HasColumnType("char(36)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id")
                    .HasName("segment_pkey");

                b.HasIndex("FairId");

                b.ToTable("segment", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.TutorialDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<int>("Order")
                    .HasColumnType("int");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("Type")
                    .HasColumnType("int");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.HasKey("Id")
                    .HasName("tutorial_pkey");

                b.ToTable("tutorial", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.UserDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<string>("Address")
                    .HasColumnType("longtext");

                b.Property<string>("Country")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Description")
                    .HasColumnType("longtext");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("Enterprise")
                    .HasColumnType("longtext");

                b.Property<bool>("IsEmailValidated")
                    .HasColumnType("tinyint(1)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.HasKey("Id")
                    .HasName("user_pkey");

                b.ToTable("user", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.UserImageDao", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("FileName")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<int>("Order")
                    .HasColumnType("int");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("datetime(6)");

                b.Property<string>("Uri")
                    .IsRequired()
                    .HasColumnType("longtext");

                b.Property<Guid>("UserId")
                    .HasColumnType("char(36)");

                b.HasKey("Id")
                    .HasName("user_image_pkey");

                b.HasIndex("UserId");

                b.ToTable("user_image", (string)null);
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CalendarFairDao", b =>
            {
                b.HasOne("UExpo.Domain.Dao.CalendarDao", "Calendar")
                    .WithMany("Fairs")
                    .HasForeignKey("CalendarId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Calendar");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CalendarSegmentDao", b =>
            {
                b.HasOne("UExpo.Domain.Dao.CalendarFairDao", "Fair")
                    .WithMany("Segments")
                    .HasForeignKey("FairId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Fair");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CallCenterChatDao", b =>
            {
                b.HasOne("UExpo.Domain.Dao.AdminDao", "Admin")
                    .WithMany("CallCenterChats")
                    .HasForeignKey("AdminId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("UExpo.Domain.Dao.UserDao", "User")
                    .WithOne("CallCenterChat")
                    .HasForeignKey("UExpo.Domain.Dao.CallCenterChatDao", "UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Admin");

                b.Navigation("User");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CallCenterMessageDao", b =>
            {
                b.HasOne("UExpo.Domain.Dao.CallCenterChatDao", "CallCenterChat")
                    .WithMany("Messages")
                    .HasForeignKey("ChatId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("CallCenterChat");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CatalogDao", b =>
            {
                b.HasOne("UExpo.Domain.Dao.UserDao", "User")
                    .WithOne("Catalog")
                    .HasForeignKey("UExpo.Domain.Dao.CatalogDao", "UserId")
                    .OnDelete(DeleteBehavior.NoAction)
                    .IsRequired();

                b.Navigation("User");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CatalogItemImageDao", b =>
            {
                b.HasOne("UExpo.Domain.Dao.CatalogDao", "Catalog")
                    .WithMany("ItemImages")
                    .HasForeignKey("CatalogId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Catalog");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CatalogPdfDao", b =>
            {
                b.HasOne("UExpo.Domain.Dao.CatalogDao", "Catalog")
                    .WithMany("Pdfs")
                    .HasForeignKey("CatalogId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Catalog");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.ExhibitorFairRegisterDao", b =>
            {
                b.HasOne("UExpo.Domain.Dao.CalendarFairDao", "CalendarFair")
                    .WithMany("FairRegisters")
                    .HasForeignKey("CalendarFairId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("UExpo.Domain.Dao.UserDao", "User")
                    .WithMany("FairRegisters")
                    .HasForeignKey("ExhibitorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("CalendarFair");

                b.Navigation("User");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.SegmentDao", b =>
            {
                b.HasOne("UExpo.Domain.Dao.FairDao", "Fair")
                    .WithMany("Segments")
                    .HasForeignKey("FairId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Fair");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.UserImageDao", b =>
            {
                b.HasOne("UExpo.Domain.Dao.UserDao", "User")
                    .WithMany("Images")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.AdminDao", b =>
            {
                b.Navigation("CallCenterChats");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CalendarDao", b =>
            {
                b.Navigation("Fairs");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CalendarFairDao", b =>
            {
                b.Navigation("FairRegisters");

                b.Navigation("Segments");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CallCenterChatDao", b =>
            {
                b.Navigation("Messages");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.CatalogDao", b =>
            {
                b.Navigation("ItemImages");

                b.Navigation("Pdfs");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.FairDao", b =>
            {
                b.Navigation("Segments");
            });

        modelBuilder.Entity("UExpo.Domain.Dao.UserDao", b =>
            {
                b.Navigation("CallCenterChat");

                b.Navigation("Catalog");

                b.Navigation("FairRegisters");

                b.Navigation("Images");
            });
#pragma warning restore 612, 618
    }
}
